# Telegraf Configuration

[global_tags]

[agent]
  interval = "30s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false
###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################
# Configuration for sending metrics to InfluxDB
[[outputs.influxdb]]
  username = "user"
  password = "123456"
# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states.
  report_active = false
# Read metrics about disk usage by mount point
[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]
# Read metrics about disk IO by device
[[inputs.diskio]]
# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  # no configuration
# Read metrics about memory usage
[[inputs.mem]]
  # no configuration
# Get the number of processes and group them by status
[[inputs.processes]]
  # no configuration
# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration
# Read metrics about system load & uptime
[[inputs.system]]
  ## Uncomment to remove deprecated metrics.
  # fielddrop = ["uptime_format"]

# # Read metrics from one or many postgresql servers
[[inputs.postgresql]]
address = "host=10.1.31.189 user=ultima password=123456 dbname=ultima sslmode=disable"
    databases = ["ultima"]
# # Read metrics from one or many postgresql servers
[[inputs.postgresql_extensible]]
   address = "host=10.1.31.189 user=ultima password=123456 dbname=ultima sslmode=disable"
   databases = ["ultima"]

##### SYSTEM QUERIES #####
[[inputs.postgresql_extensible.query]] sqlquery="select count(1) as amount, state from pg_stat_activity where usename != 'telegraf' group by state" version=901 withdbname=false tagvalue="state" measurement="pg_connections"

[[inputs.postgresql_extensible.query]] sqlquery="SELECT schema_name, pg_size_pretty(sum(table_size)::bigint) as disk_space, ((sum(table_size)::bigint) / 1024) / 1024 as size_MB FROM (SELECT pg_catalog.pg_namespace.nspname as schema_name, pg_relation_size(pg_catalog.pg_class.oid) as table_size FROM pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON relnamespace = pg_catalog.pg_namespace.oid) t WHERE t.schema_name not in ('information_schema','pg_catalog','pg_toast') GROUP BY schema_name ORDER BY schema_name" version=901 withdbname=false tagvalue="schema_name" measurement="pg_schemas_size"

[[inputs.postgresql_extensible.query]] sqlquery="select pg_xlog_location_diff(sent_location, write_location)::integer as write_lag, pg_xlog_location_diff(sent_location, flush_location)::integer as flush_lag, pg_xlog_location_diff(sent_location, replay_location)::integer as replay_lag from pg_stat_replication;" version=901 withdbname=false tagvalue="" measurement="pg_stat_replication"

##### APPLICATION QUERIES #####
[[inputs.postgresql_extensible.query]] sqlquery="SELECT count (*) FROM event" version=901 withdbname=false tagvalue="" measurement="events_count"

[[inputs.postgresql_extensible.query]] sqlquery="SELECT count(*) from event where 'Alarm'=ANY(event_tags)" version=901 withdbname=false tagvalue="" measurement="alarm_all" 
[[inputs.postgresql_extensible.query]] sqlquery="SELECT count(*) from event where 'Fault'=ANY(event_tags)" version=901 withdbname=false tagvalue="" measurement="fault_all"
[[inputs.postgresql_extensible.query]] sqlquery="SELECT count(*) from event where 'Alarm'=ANY(event_tags) and registered BETWEEN now()::date-interval '1 month' AND now()::date" version=901 withdbname=false tagvalue="" measurement="alarm_all_month"
[[inputs.postgresql_extensible.query]] sqlquery="SELECT count(*) from event where 'Fault'=ANY(event_tags) and registered BETWEEN now()::date-interval '1 month' AND now()::date" version=901 withdbname=false tagvalue="" measurement="fault_all_month"

[[inputs.postgresql_extensible.query]] sqlquery="SELECT(select count(*) from event where 'Alarm'=ANY(event_tags) and registered BETWEEN now()::date-interval '1 month' AND now()::date) + (select count(*) from event where 'Fault'=ANY(event_tags) and registered BETWEEN now()::date-interval '1 month' AND now()::date) as SUM_FAULTS_ALARMS_MONTH" version=901 withdbname=false tagvalue="" measurement="sum_faults_alarms_month"
